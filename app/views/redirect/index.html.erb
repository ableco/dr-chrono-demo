<script>
function getPatientList() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      var response = JSON.parse(this.response)
      var html = '<ul>'
      var data = response.results
      for(i = 0; i < data.length; i++) {
        html += '<li><span>' + data[i].first_name + ' ' + data[i].last_name + '</span>'
        html += '<button onClick="getLabResults(' + data[i].id + ')">Get Lab Results</button></li>'
      }
      html += '</ul>'
      var listDiv = document.getElementById('patient-list')
      listDiv.innerHTML = html
    }
  };

  var access_token = getCookie("tractus_access_token")
  xhttp.open("GET", "/phi/patients?access_token=" + access_token, true)
  xhttp.send()
}

function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for(var i = 0; i <ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

function showAccessToken() {
  console.log('tractus_access_token::')
  var token = getCookie("tractus_access_token")
  console.log(token)
}

function parseResultNumbers(normalRange, value, unit) {
  var results = {
    isParseable: true,
    isReported: true,
    isRange: false,
    isLowerLimit: false,
    isUpperLimit: false,
    isBoolean: false,
    normalValues: {
      lower: null,
      upper: null,
      reactive: null,
    },
    values: {
      reactive: null,
      value: null,
      unit: null,
    }
  }

  // First check for if it's reported
  if (value == 'DNR') {
    results.isReported = false;
    return results
  }

  // Next check for boolean reactive / nonreactive
  if (normalRange == 'NON-REACTIVE' || normalRange == 'REACTIVE') {
    results.isBoolean = true
    results.normalValues.reactive = (normalRange == 'REACTIVE')
    results.values.reactive = (value == 'REACTIVE')
    return results
  }

  // Next check for ranges
  var indexOfDash = normalRange.indexOf('-')
  if (indexOfDash > -1) {
    var lower = parseFloat(normalRange.substr(0, indexOfDash))
    var upper = parseFloat(normalRange.substr(indexOfDash + 1))
    if (!isNaN(lower) && !isNaN(lower)) {
      results.isRange = true
      results.normalValues.lower = lower
      results.normalValues.upper = upper
      results.values.value = parseFloat(value)
      results.values.unit = unit
      return results
    }
  }

  //Next check for lower limit
  if(normalRange.indexOf('>') == 0) {
    var lower = parseFloat(normalRange.substr(1))
    if (!isNaN(lower)) {
      results.isLowerLimit = true
      results.normalValues.lower = lower
      results.values.value = parseFloat(value)
      results.values.unit = unit
      return results
    }
  }

  if(normalRange.indexOf('<') == 0) {
    var upper = parseFloat(normalRange.substr(1))
    if (!isNaN(lower)) {
      results.isUpperLimit = true
      results.normalValues.upper = upper
      results.values.value = parseFloat(value)
      results.values.unit = unit
      return results
    }
  }

  results.isParseable = false
  return results;
}


function getLabResults(patient_id) {
  console.log('get lab results')
  console.log(patient_id)
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      var response = JSON.parse(this.response)
      console.log(response)

      var data = response.results
      var groupedByTestCode = {}
      for(i = 0; i < data.length; i++) {
        if(groupedByTestCode[data[i].test.code] == null) {
          groupedByTestCode[data[i].test.code] = {
            name: data[i].test.description,
            tests: [],
            code: data[i].test.code
          }
        }
        groupedByTestCode[data[i].test.code].tests.push(data[i])
      }
      console.log(groupedByTestCode)

      var html = '<div><h4>' + response.results.length + ' lab test results!</h4>'
      html += '<ul>'
      var codes = Object.keys(groupedByTestCode)
      for(i = 0; i < codes.length; i++) {
        var group = groupedByTestCode[codes[i]]
        html += '<li><div>' + group.name + ' (code ' + group.code + ')</div>'
        html += '<div><label>tests:</label></div>'
        html += '<ul>'
        for(j = 0; j < group.tests.length; j++) {
          var normalRange = group.tests[j].normal_range


          html += '<li>'
          html += '<div><label>test: </label>' + group.tests[j].obs_description
          html += ', <label>value: </label>' + group.tests[j].value
          html += ', <label>unit: </label>' + group.tests[j].unit
          html += ', <label>normal range: </label>' + group.tests[j].normal_range + '</div>'

          var results = parseResultNumbers(normalRange, group.tests[j].value, group.tests[j].unit)
          if (!results.isParseable) {
            html += '<div style="color:red">NOT ABLE TO PARSE</div>'
          } else {
            if (!results.isReported) {
                html += '<div style="color:orange">DID NOT REPORT</div>'
            } else {

              if (results.isBoolean) {
                html += '<div><b>type: BOOLEAN</b></div>'
                if (results.normalValues.reactive == results.values.reactive) {
                  html += '<div>value is the same as normal</div>'
                } else {
                  html += '<div>value is <b>NOT</b> the same as normal</div>'
                }
              }

              if (results.isRange) {
                html += '<div><b>type: RANGE</b></div>'
                html += '<div><label>lower: </label>' + results.normalValues.lower + '</div>'
                html += '<div><label>upper: </label>' + results.normalValues.upper + '</div>'
              }

              if (results.isUpperLimit) {
                html += '<div><b>type: LOWER LIMIT</b></div>'
                html += '<div><label>upper: </label>' + results.normalValues.upper + '</div>'
              }

              if (results.isLowerLimit) {
                html += '<div><b>type: UPPER LIMIT</b></div>'
                html += '<div><label>lower: </label>' + results.normalValues.lower + '</div>'
              }
            }
          }

          html += '</li>'
        }
        html += '</ul>'
      }

      var listDiv = document.getElementById('test-results-list')
      listDiv.innerHTML = html
    }
  };

  var access_token = getCookie("tractus_access_token")
  xhttp.open("GET", "/phi/lab_results?access_token=" + access_token + "&patient_id=" + patient_id, true)
  xhttp.send()
}

</script>

<h3>Redirected back from drchrono with code: <%= @code %></h3>

<div style="display: flex; flex-direction: row; height: 500px;">
  <div style="width: 300px;">
    <h2>Patients</h2>
    <button style="width: 100px; height: 40px;" onClick="getPatientList()">Get Patient List</button>
    <div id="patient-list"></div>
  </div>
  <div>
    <h2>Results</h2>
    <div id="test-results-list"></div>
  </div>
</div>

<!-- <button onClick="showAccessToken()">Get Access Token!</button> -->
